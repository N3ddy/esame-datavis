{"version":3,"file":"bundle.js","sources":["index.js"],"sourcesContent":["import { csv } from 'd3';\nimport {\n  select,\n  json,\n  pie,\n  arc,\n  scaleOrdinal,\n  format\n} from 'd3';\n\n// Colors for the sections in Pie Chart\nconst sectionColors = [\n  \t\t'#2688FF', '#302DEB', '#E836EB', '#A54CFF', '#FF4762', '#FF032E', '#EB3607', '#A8770C', '#C96D1C', '#948312',\n      '#998608'];\n\n// Data set URI\nconst csvUrl = 'https://gist.githubusercontent.com/N3ddy/8cf722065abecebf54a34a6344f173db/raw/60bd8c4467a1bca472dff0b927dc82165d0cb5d1/Food_Production.csv';\n\n// Function to fetch data from the URI\nconst fetchData = async () => {\n  let data = await csv(csvUrl);\n  data = data.filter(d => d['Animal Feed'] > 0)\n  console.log(data)\n  return data;\n};\n\nconst fetchVegData = async () => {\n  let data = await csv(csvUrl);\n  data = data.filter(d => d['Animal Feed'] <= 0)\n  data = data.filter(d => d.Total_emissions > 2)\n  console.log(data)\n  return data;\n};\n\n// Select the SVG from the HTML body\nconst svg = select(\"svg\");\n\n// Format axes text\nconst xAxisTickFormat = number =>\n  \tformat('.4~g')(number);\n\n// Render Pie Chart on the canvas\nconst animal_render = (data) => {\n  const pieData = pie().value(d=>d.Total_emissions)(data);\n  const colors = scaleOrdinal()\n  \t.domain(data)\n  \t.range(sectionColors);\n  \n  // Object for generating Arcs of the sections\n  const arcGenerator = d3.arc()\n  .innerRadius(0)\n  .outerRadius(250);\n\n  // Segments are the partition in the Pie Chart\n\tconst segments = arc()\n  \t.innerRadius(0)\n  \t.outerRadius(175)\n  \t.padAngle(0)\n  \t.padRadius(0);\n  \n  const sections = svg.append(\"g\")\n  \t.attr(\"transform\", `translate(250,250)`)\n  \t.selectAll(\"path\").data(pieData);\n  \n  sections.enter()\n    .append(\"path\")\n    .attr(\"d\", segments)\n  \t.attr(\"fill\", d => colors(d.data.Total_emissions));\n  \n  // Render text on each section\n  sections\n    .enter()\n    .append('text')\n    .text(d => xAxisTickFormat((d.data.Total_emissions))+\"Kg\")\n    .attr(\"transform\", function(d) { return \"translate(\" + arcGenerator.centroid(d) + \")\";  })\n    .style(\"text-anchor\", \"middle\")\n  \t.style('fill', 'black')\n    .style(\"font-size\", 10);\n  \n  // Render legend for the data\n  const legends = svg.append(\"g\")\n  \t.attr(\"transform\", \"translate(500,100)\")\n    .selectAll(\".legends\").data(pieData);\n  \n  const legend = legends.enter().append(\"g\").classed(\".legends\",true)\n  \t.attr(\"transform\", (d,i)=>{\n      return `translate(0,${(i+1)*30})`;\n    });\n  \n  // Formats the legend for Deaths\n  legend.append(\"rect\").attr(\"width\",20).attr(\"height\",20)\n  \t.attr(\"fill\", d => colors(d.data.Total_emissions));\n  \n  legend.append(\"text\")\n  \t.attr(\"x\", 250)\n  \t.attr(\"y\", 15)\n  \t.attr(\"class\",\"legend_value\")\n  \t.text(d=>xAxisTickFormat(d.data.Total_emissions)+\"Kg\");\n  \n  // Formats the legend for Countries \n  legend.append(\"text\")\n  \t.attr(\"x\", 25)\n  \t.attr(\"y\", 15)\n  \t.attr(\"class\",\"legend_text\")\n  \t.text(d => d.data['Food product']);\n}\n\nconst plant_render = (data) => {\n  const pieData = pie().value(d=>d.Total_emissions)(data);\n  const colors = scaleOrdinal()\n  \t.domain(data)\n  \t.range(sectionColors);\n  \n  // Object for generating Arcs of the sections\n  const arcGenerator = d3.arc()\n  .innerRadius(0)\n  .outerRadius(250);\n\n  // Segments are the partition in the Pie Chart\n\tconst segments = arc()\n  \t.innerRadius(0)\n  \t.outerRadius(175)\n  \t.padAngle(0)\n  \t.padRadius(0);\n  \n  const sections = svg.append(\"g\")\n    .attr(\"transform\", `translate(1000,250)`)\n  \t.selectAll(\"path\").data(pieData);\n  \n  sections.enter()\n    .append(\"path\")\n    .attr(\"d\", segments)\n  \t.attr(\"fill\", d => colors(d.data.Total_emissions));\n  \n  // Render text on each section\n  sections\n    .enter()\n    .append('text')\n    .text(d => xAxisTickFormat((d.data.Total_emissions))+\"Kg\")\n    .attr(\"transform\", function(d) { return \"translate(\" + arcGenerator.centroid(d) + \")\";  })\n    .style(\"text-anchor\", \"middle\")\n  \t.style('fill', 'black')\n    .style(\"font-size\", 10);\n  \n  // Render legend for the data\n  const legends = svg.append(\"g\")\n    .attr(\"transform\", \"translate(1250,100)\")\n    .selectAll(\".legends\").data(pieData);\n  \n  const legend = legends.enter().append(\"g\").classed(\".legends\",true)\n  \t.attr(\"transform\", (d,i)=>{\n      return `translate(0,${(i+1)*30})`;\n    });\n  \n  // Formats the legend for Deaths\n  legend.append(\"rect\").attr(\"width\",20).attr(\"height\",20)\n  \t.attr(\"fill\", d => colors(d.data.Total_emissions));\n  \n  legend.append(\"text\")\n  \t.attr(\"x\", 250)\n  \t.attr(\"y\", 15)\n  \t.attr(\"class\",\"legend_value\")\n  \t.text(d=>xAxisTickFormat((d.data.Total_emissions))+\"Kg\");\n  \n  // Formats the legend for Countries \n  legend.append(\"text\")\n  \t.attr(\"x\", 25)\n  \t.attr(\"y\", 15)\n  \t.attr(\"class\",\"legend_text\")\n  \t.text(d => d.data['Food product']);\n}\n\n// Main function\nconst run = async () => {\n  let animal_data = await fetchData()\n  let veg_data = await fetchVegData()\n\tanimal_render(animal_data);\n  plant_render(veg_data);\n};\n\nrun();"],"names":["const","let","csv","select","format","pie","scaleOrdinal","arc"],"mappings":"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"}